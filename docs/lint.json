[
  {
    "name": "DataAPI#_addClass",
    "filePath": "scripts/simple_controller.js",
    "lines": [
      {
        "lineNumber": 626,
        "line": "  /**\r"
      },
      {
        "lineNumber": 627,
        "line": "   * Look up struct definition for a class.\r"
      },
      {
        "lineNumber": 628,
        "line": "   *\r"
      },
      {
        "lineNumber": 629,
        "line": "   * @param cls: the class\r"
      },
      {
        "lineNumber": 630,
        "line": "   * @param auto_create: If true, automatically create definition if not already existing.\r"
      },
      {
        "lineNumber": 631,
        "line": "   * @returns {IterableIterator<*>}\r"
      },
      {
        "lineNumber": 632,
        "line": "   */\r"
      },
      {
        "lineNumber": 633,
        "line": "\r"
      },
      {
        "lineNumber": 634,
        "line": "  _addClass(cls, dstruct) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "dstruct"
    ],
    "docParams": [
      "cls:",
      "auto_create:"
    ]
  },
  {
    "name": "DataAPI#resolvePath_intern",
    "filePath": "scripts/simple_controller.js",
    "lines": [
      {
        "lineNumber": 673,
        "line": "  /**\r"
      },
      {
        "lineNumber": 674,
        "line": "   get meta information for a datapath.\r"
      },
      {
        "lineNumber": 675,
        "line": "\r"
      },
      {
        "lineNumber": 676,
        "line": "   @param ignoreExistence: don't try to get actual data associated with path,\r"
      },
      {
        "lineNumber": 677,
        "line": "   just want meta information\r"
      },
      {
        "lineNumber": 678,
        "line": "   */\r"
      },
      {
        "lineNumber": 679,
        "line": "  resolvePath_intern(ctx, inpath, ignoreExistence = false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "inpath",
      "ignoreExistence"
    ],
    "docParams": [
      "ignoreExistence:"
    ]
  },
  {
    "name": "Container#wrap",
    "filePath": "scripts/ui.js",
    "lines": [
      {
        "lineNumber": 180,
        "line": "  /**\r"
      },
      {
        "lineNumber": 181,
        "line": "   *\r"
      },
      {
        "lineNumber": 182,
        "line": "   * @param mode: flexbox wrap mode, can be wrap, nowrap, or wrap-reverse\r"
      },
      {
        "lineNumber": 183,
        "line": "   * @returns {Container}\r"
      },
      {
        "lineNumber": 184,
        "line": "   */\r"
      },
      {
        "lineNumber": 185,
        "line": "  wrap(mode=\"wrap\") {\r"
      }
    ],
    "codeParams": [
      "mode"
    ],
    "docParams": [
      "mode:"
    ]
  },
  {
    "name": "buildString",
    "filePath": "scripts/units.js",
    "lines": [
      {
        "lineNumber": 258,
        "line": "/**\r"
      },
      {
        "lineNumber": 259,
        "line": " *\r"
      },
      {
        "lineNumber": 260,
        "line": " * @param value Note: is not converted to internal unit\r"
      },
      {
        "lineNumber": 261,
        "line": " * @param unit: Unit to use, should be a string referencing unit type, see unitDefine().name\r"
      },
      {
        "lineNumber": 262,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 263,
        "line": " */\r"
      },
      {
        "lineNumber": 264,
        "line": "export function buildString(value, unit=Unit.baseUnit) {\r"
      }
    ],
    "codeParams": [
      "value",
      "unit"
    ],
    "docParams": [
      "value",
      "unit:"
    ]
  }
]