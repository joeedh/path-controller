[
  {
    "name": "DataAPI#_addClass",
    "filePath": "scripts/controller/simple_controller.js",
    "lines": [
      {
        "lineNumber": 718,
        "line": "  /**\r"
      },
      {
        "lineNumber": 719,
        "line": "   * Look up struct definition for a class.\r"
      },
      {
        "lineNumber": 720,
        "line": "   *\r"
      },
      {
        "lineNumber": 721,
        "line": "   * @param cls: the class\r"
      },
      {
        "lineNumber": 722,
        "line": "   * @param auto_create: If true, automatically create definition if not already existing.\r"
      },
      {
        "lineNumber": 723,
        "line": "   * @returns {IterableIterator<*>}\r"
      },
      {
        "lineNumber": 724,
        "line": "   */\r"
      },
      {
        "lineNumber": 725,
        "line": "\r"
      },
      {
        "lineNumber": 726,
        "line": "  _addClass(cls, dstruct) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "dstruct"
    ],
    "docParams": [
      "cls:",
      "auto_create:"
    ]
  },
  {
    "name": "DataAPI#resolvePath_intern",
    "filePath": "scripts/controller/simple_controller.js",
    "lines": [
      {
        "lineNumber": 839,
        "line": "  /**\r"
      },
      {
        "lineNumber": 840,
        "line": "   get meta information for a datapath.\r"
      },
      {
        "lineNumber": 841,
        "line": "\r"
      },
      {
        "lineNumber": 842,
        "line": "   @param ignoreExistence: don't try to get actual data associated with path,\r"
      },
      {
        "lineNumber": 843,
        "line": "   just want meta information\r"
      },
      {
        "lineNumber": 844,
        "line": "   */\r"
      },
      {
        "lineNumber": 845,
        "line": "  resolvePath_intern(ctx, inpath, ignoreExistence = false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "inpath",
      "ignoreExistence"
    ],
    "docParams": [
      "ignoreExistence:"
    ]
  },
  {
    "name": "Container#wrap",
    "filePath": "scripts/core/ui.js",
    "lines": [
      {
        "lineNumber": 210,
        "line": "  /**\r"
      },
      {
        "lineNumber": 211,
        "line": "   *\r"
      },
      {
        "lineNumber": 212,
        "line": "   * @param mode: flexbox wrap mode, can be wrap, nowrap, or wrap-reverse\r"
      },
      {
        "lineNumber": 213,
        "line": "   * @returns {Container}\r"
      },
      {
        "lineNumber": 214,
        "line": "   */\r"
      },
      {
        "lineNumber": 215,
        "line": "  wrap(mode=\"wrap\") {\r"
      }
    ],
    "codeParams": [
      "mode"
    ],
    "docParams": [
      "mode:"
    ]
  },
  {
    "name": "buildString",
    "filePath": "scripts/core/units.js",
    "lines": [
      {
        "lineNumber": 388,
        "line": "/**\r"
      },
      {
        "lineNumber": 389,
        "line": " *\r"
      },
      {
        "lineNumber": 390,
        "line": " * @param value Note: is not converted to internal unit\r"
      },
      {
        "lineNumber": 391,
        "line": " * @param unit: Unit to use, should be a string referencing unit type, see unitDefine().name\r"
      },
      {
        "lineNumber": 392,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 393,
        "line": " */\r"
      },
      {
        "lineNumber": 394,
        "line": "export function buildString(value, baseUnit=Unit.baseUnit, decimalPlaces=3, displayUnit=Unit.baseUnit) {\r"
      }
    ],
    "codeParams": [
      "value",
      "baseUnit",
      "decimalPlaces",
      "displayUnit"
    ],
    "docParams": [
      "value",
      "unit:"
    ]
  },
  {
    "name": "Screen#pickElement",
    "filePath": "scripts/screen/FrameManager.js",
    "lines": [
      {
        "lineNumber": 321,
        "line": "  /** \r"
      },
      {
        "lineNumber": 322,
        "line": "   * @param x\r"
      },
      {
        "lineNumber": 323,
        "line": "   * @param y\r"
      },
      {
        "lineNumber": 324,
        "line": "   * @param args arguments : {sx, sy, nodeclass, excluded_classes}\r"
      },
      {
        "lineNumber": 325,
        "line": "  */\r"
      },
      {
        "lineNumber": 326,
        "line": "  pickElement(x, y, args, sy, nodeclass, excluded_classes) {\r"
      }
    ],
    "codeParams": [
      "x",
      "y",
      "args",
      "sy",
      "nodeclass",
      "excluded_classes"
    ],
    "docParams": [
      "x",
      "y",
      "args"
    ]
  },
  {
    "name": "RichEditor#formatLine",
    "filePath": "scripts/widgets/ui_richedit.js",
    "lines": [
      {
        "lineNumber": 159,
        "line": "  /**\r"
      },
      {
        "lineNumber": 160,
        "line": "  * Only available in textOnlyMode.  Formats html-formated line.\r"
      },
      {
        "lineNumber": 161,
        "line": "   *\r"
      },
      {
        "lineNumber": 162,
        "line": "   * @param line : line to format\r"
      },
      {
        "lineNumber": 163,
        "line": "   * @parem text : whole text\r"
      },
      {
        "lineNumber": 164,
        "line": "  * */\r"
      },
      {
        "lineNumber": 165,
        "line": "  formatLine(line, text) {\r"
      }
    ],
    "codeParams": [
      "line",
      "text"
    ],
    "docParams": [
      "line"
    ]
  }
]