[
  {
    "name": "ModelInterface#execOrRedo",
    "filePath": "scripts/controller/controller.js",
    "lines": [
      {
        "lineNumber": 130,
        "line": "  /**\r"
      },
      {
        "lineNumber": 131,
        "line": "   * runs .undo,.redo if toolstack head is same as tool\r"
      },
      {
        "lineNumber": 132,
        "line": "   *\r"
      },
      {
        "lineNumber": 133,
        "line": "   * otherwise, .execTool(ctx, tool) is called.\r"
      },
      {
        "lineNumber": 134,
        "line": "   *\r"
      },
      {
        "lineNumber": 135,
        "line": "   * @param compareInputs : check if toolstack head has identical input values, defaults to false\r"
      },
      {
        "lineNumber": 136,
        "line": "   * */\r"
      },
      {
        "lineNumber": 137,
        "line": "  execOrRedo(ctx, toolop, compareInputs=false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "toolop",
      "compareInputs"
    ],
    "docParams": [
      "compareInputs"
    ]
  },
  {
    "name": "DataAPI#_addClass",
    "filePath": "scripts/controller/simple_controller.js",
    "lines": [
      {
        "lineNumber": 785,
        "line": "  /**\r"
      },
      {
        "lineNumber": 786,
        "line": "   * Look up struct definition for a class.\r"
      },
      {
        "lineNumber": 787,
        "line": "   *\r"
      },
      {
        "lineNumber": 788,
        "line": "   * @param cls: the class\r"
      },
      {
        "lineNumber": 789,
        "line": "   * @param auto_create: If true, automatically create definition if not already existing.\r"
      },
      {
        "lineNumber": 790,
        "line": "   * @returns {IterableIterator<*>}\r"
      },
      {
        "lineNumber": 791,
        "line": "   */\r"
      },
      {
        "lineNumber": 792,
        "line": "\r"
      },
      {
        "lineNumber": 793,
        "line": "  _addClass(cls, dstruct) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "dstruct"
    ],
    "docParams": [
      "cls:",
      "auto_create:"
    ]
  },
  {
    "name": "DataAPI#resolvePath_intern",
    "filePath": "scripts/controller/simple_controller.js",
    "lines": [
      {
        "lineNumber": 906,
        "line": "  /**\r"
      },
      {
        "lineNumber": 907,
        "line": "   get meta information for a datapath.\r"
      },
      {
        "lineNumber": 908,
        "line": "\r"
      },
      {
        "lineNumber": 909,
        "line": "   @param ignoreExistence: don't try to get actual data associated with path,\r"
      },
      {
        "lineNumber": 910,
        "line": "   just want meta information\r"
      },
      {
        "lineNumber": 911,
        "line": "   */\r"
      },
      {
        "lineNumber": 912,
        "line": "  resolvePath_intern(ctx, inpath, ignoreExistence = false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "inpath",
      "ignoreExistence"
    ],
    "docParams": [
      "ignoreExistence:"
    ]
  },
  {
    "name": "Container#wrap",
    "filePath": "scripts/core/ui.js",
    "lines": [
      {
        "lineNumber": 246,
        "line": "  /**\r"
      },
      {
        "lineNumber": 247,
        "line": "   *\r"
      },
      {
        "lineNumber": 248,
        "line": "   * @param mode: flexbox wrap mode, can be wrap, nowrap, or wrap-reverse\r"
      },
      {
        "lineNumber": 249,
        "line": "   * @returns {Container}\r"
      },
      {
        "lineNumber": 250,
        "line": "   */\r"
      },
      {
        "lineNumber": 251,
        "line": "  wrap(mode=\"wrap\") {\r"
      }
    ],
    "codeParams": [
      "mode"
    ],
    "docParams": [
      "mode:"
    ]
  },
  {
    "name": "buildString",
    "filePath": "scripts/core/units.js",
    "lines": [
      {
        "lineNumber": 400,
        "line": "/**\r"
      },
      {
        "lineNumber": 401,
        "line": " *\r"
      },
      {
        "lineNumber": 402,
        "line": " * @param value Note: is not converted to internal unit\r"
      },
      {
        "lineNumber": 403,
        "line": " * @param unit: Unit to use, should be a string referencing unit type, see unitDefine().name\r"
      },
      {
        "lineNumber": 404,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 405,
        "line": " */\r"
      },
      {
        "lineNumber": 406,
        "line": "export function buildString(value, baseUnit=Unit.baseUnit, decimalPlaces=3, displayUnit=Unit.baseUnit) {\r"
      }
    ],
    "codeParams": [
      "value",
      "baseUnit",
      "decimalPlaces",
      "displayUnit"
    ],
    "docParams": [
      "value",
      "unit:"
    ]
  },
  {
    "name": "Screen#pickElement",
    "filePath": "scripts/screen/FrameManager.js",
    "lines": [
      {
        "lineNumber": 329,
        "line": "  /** \r"
      },
      {
        "lineNumber": 330,
        "line": "   * @param x\r"
      },
      {
        "lineNumber": 331,
        "line": "   * @param y\r"
      },
      {
        "lineNumber": 332,
        "line": "   * @param args arguments : {sx, sy, nodeclass, excluded_classes}\r"
      },
      {
        "lineNumber": 333,
        "line": "  */\r"
      },
      {
        "lineNumber": 334,
        "line": "  pickElement(x, y, args, sy, nodeclass, excluded_classes) {\r"
      }
    ],
    "codeParams": [
      "x",
      "y",
      "args",
      "sy",
      "nodeclass",
      "excluded_classes"
    ],
    "docParams": [
      "x",
      "y",
      "args"
    ]
  },
  {
    "name": "Screen#popup",
    "filePath": "scripts/screen/FrameManager.js",
    "lines": [
      {
        "lineNumber": 408,
        "line": "  /**\r"
      },
      {
        "lineNumber": 409,
        "line": "   *\r"
      },
      {
        "lineNumber": 410,
        "line": "   * @param popupDelay : if non-zero, wait for popup to layout for popupDelay miliseconds,\r"
      },
      {
        "lineNumber": 411,
        "line": "   *                     then move the popup so it's fully inside the window (if it's outsize).\r"
      },
      {
        "lineNumber": 412,
        "line": "   *\r"
      },
      {
        "lineNumber": 413,
        "line": "    * */\r"
      },
      {
        "lineNumber": 414,
        "line": "  popup(owning_node, elem_or_x, y, closeOnMouseOut=true, popupDelay=250) {\r"
      }
    ],
    "codeParams": [
      "owning_node",
      "elem_or_x",
      "y",
      "closeOnMouseOut",
      "popupDelay"
    ],
    "docParams": [
      "popupDelay"
    ]
  },
  {
    "name": "ToolStack#execOrRedo",
    "filePath": "scripts/toolsys/simple_toolsys.js",
    "lines": [
      {
        "lineNumber": 564,
        "line": "  /**\r"
      },
      {
        "lineNumber": 565,
        "line": "   * runs .undo,.redo if toolstack head is same as tool\r"
      },
      {
        "lineNumber": 566,
        "line": "   *\r"
      },
      {
        "lineNumber": 567,
        "line": "   * otherwise, .execTool(ctx, tool) is called.\r"
      },
      {
        "lineNumber": 568,
        "line": "   *\r"
      },
      {
        "lineNumber": 569,
        "line": "   * @param compareInputs : check if toolstack head has identical input values, defaults to false\r"
      },
      {
        "lineNumber": 570,
        "line": "   * */\r"
      },
      {
        "lineNumber": 571,
        "line": "  execOrRedo(ctx, tool, compareInputs=false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "tool",
      "compareInputs"
    ],
    "docParams": [
      "compareInputs"
    ]
  },
  {
    "name": "RichEditor#formatLine",
    "filePath": "scripts/widgets/ui_richedit.js",
    "lines": [
      {
        "lineNumber": 159,
        "line": "  /**\r"
      },
      {
        "lineNumber": 160,
        "line": "  * Only available in textOnlyMode.  Formats html-formated line.\r"
      },
      {
        "lineNumber": 161,
        "line": "   *\r"
      },
      {
        "lineNumber": 162,
        "line": "   * @param line : line to format\r"
      },
      {
        "lineNumber": 163,
        "line": "   * @parem text : whole text\r"
      },
      {
        "lineNumber": 164,
        "line": "  * */\r"
      },
      {
        "lineNumber": 165,
        "line": "  formatLine(line, text) {\r"
      }
    ],
    "codeParams": [
      "line",
      "text"
    ],
    "docParams": [
      "line"
    ]
  }
]